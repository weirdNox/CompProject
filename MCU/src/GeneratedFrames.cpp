#if GenFrames

#include <Arduino.h>
#include "Wire.h"
#include "timer.h"

typedef  uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;

typedef   int8_t  s8;
typedef  int16_t s16;
typedef  int32_t s32;

#define arrayCount(Arr) ((sizeof(Arr))/(sizeof(*Arr)))

#define inputMsb(Val) ((Val >> 8) & 0x0F)
#define inputLsb(Val) ((Val >> 0) & 0xFF)

typedef enum {
    DacAddr = 0x60,
    LDAC = 1<<9, // RD9
    MaxPointsPerFrame = 300,
};

typedef struct {
    u16 X, Y;
} point;

typedef struct {
    u32 RepeatCount;
    u32 PointCount;
    point Points[MaxPointsPerFrame];
} frame;

#if 0
frame Frames[] = {
    {
        30, 71, {
            {1600, 1728}, {1472, 1728}, {1408, 1664}, {1344, 1600}, {1280, 1472}, {1280, 1408}, {1344, 1344},
            {1408, 1280}, {1472, 1216}, {1536, 1216}, {1600, 1216}, {1664, 1216}, {1728, 1280}, {1728, 1344},
            {1728, 1408}, {1792, 1408}, {1792, 1600}, {1728, 1664}, {1728, 1728}, {1792, 1728}, {1856, 1728},
            {1920, 1728}, {1984, 1728}, {2048, 1728}, {2112, 1728}, {2176, 1664}, {2240, 1664}, {2240, 1600},
            {2240, 1408}, {2112, 1152}, {2048, 1152}, {2112, 1216}, {2176, 1216}, {2240, 1280}, {2240, 1344},
            {2240, 1472}, {2240, 1536}, {1984, 1152}, {1920, 1216}, {1856, 1280}, {1792, 1344}, {1792, 1472},
            {1792, 1536}, {1536, 1792}, {1536, 2048}, {1536, 2112}, {1536, 1920}, {1536, 1856}, {1536, 2176},
            {1536, 2304}, {1536, 2368}, {1536, 2496}, {1536, 2624}, {1536, 2880}, {1536, 2944}, {1600, 2944},
            {1728, 2944}, {1792, 2944}, {1856, 2944}, {1920, 2880}, {1920, 2816}, {1920, 2624}, {1920, 2560},
            {1920, 2368}, {1920, 2304}, {1920, 1984}, {1920, 1920}, {1920, 1856}, {1920, 2112}, {1920, 2176},
            {1920, 1792},
        }
    },
    {
        15, 77, {
            {1536, 1728}, {1408, 1664}, {1408, 1600}, {1344, 1536}, {1344, 1472}, {1472, 1216}, {1536, 1152},
            {1600, 1152}, {1664, 1216}, {1728, 1280}, {1792, 1280}, {1792, 1344}, {1856, 1408}, {1856, 1472},
            {1792, 1600}, {1664, 1664}, {1600, 1664}, {1408, 1344}, {1472, 1280}, {1536, 1280}, {1920, 1664},
            {1856, 1664}, {1984, 1728}, {2048, 1728}, {2112, 1664}, {2176, 1664}, {2240, 1600}, {2240, 1536},
            {2240, 1472}, {2240, 1408}, {2240, 1344}, {2240, 1280}, {2176, 1216}, {1920, 1216}, {1856, 1280},
            {2048, 1152}, {1856, 1536}, {1792, 1664}, {1600, 1792}, {1600, 1920}, {1600, 1984}, {1600, 2048},
            {1600, 2112}, {1600, 2176}, {1600, 2240}, {1600, 2304}, {1600, 2432}, {1600, 2496}, {1600, 2560},
            {1600, 2624}, {1728, 2752}, {1856, 2752}, {1920, 2688}, {1984, 2624}, {2048, 2496}, {2048, 2432},
            {2048, 2304}, {2048, 2176}, {2048, 2048}, {2048, 1984}, {2048, 1920}, {2048, 1856}, {2048, 1792},
            {1728, 3072}, {1664, 3200}, {1728, 3008}, {1792, 2944}, {1920, 3136}, {1920, 3200}, {1856, 3072},
            {1728, 3136}, {1728, 3328}, {1856, 3392}, {1792, 3264}, {1792, 3520}, {1664, 3584}, {1664, 3776},
        }
    },
};
#endif
frame Frames[] = {
    {
        73, 40, {
            {2240, 3136}, {1856, 3072}, {1792, 3072}, {1664, 2944}, {1664, 2752}, {1664, 2688}, {1664, 2560},
            {1792, 2432}, {1920, 2368}, {2176, 2304}, {2304, 2176}, {2240, 1984}, {1920, 1600}, {2368, 1536},
            {2496, 1856}, {2688, 2304}, {2304, 2752}, {2176, 2816}, {2368, 2880}, {2432, 2880}, {2176, 2880},
            {2688, 2560}, {2688, 2624}, {2816, 2880}, {2752, 3200}, {2432, 3264}, {1664, 3264}, {1280, 2560},
            {1664, 2176}, {1664, 2112}, {1856, 1984}, {1984, 1920}, {2496, 1664}, {2560, 1600}, {2688, 1600},
            {3008, 1472}, {2112, 1216}, {2176, 832}, {1920, 896}, {1984, 960},
        }
    },
    {
        145, 40, {
            {832, 3008}, {640, 2368}, {640, 2304}, {640, 2240}, {640, 2176}, {704, 1984}, {704, 1920},
            {768, 1856}, {832, 1792}, {896, 1728}, {960, 1664}, {1024, 1600}, {1024, 1536}, {1088, 1536},
            {1152, 1472}, {1344, 1344}, {1408, 1344}, {1920, 1280}, {2112, 1216}, {2816, 2304}, {2752, 2624},
            {2688, 2688}, {2496, 2816}, {2368, 2880}, {2240, 2944}, {2112, 2944}, {2048, 2944}, {1344, 3136},
            {1088, 3264}, {1792, 3008}, {1856, 3008}, {1344, 3008}, {1344, 2944}, {2688, 2240}, {2816, 2112},
            {2688, 1792}, {2624, 1728}, {2496, 1472}, {2432, 1344}, {2432, 1280},
        }
    },
};

Timer4 Timer = {};
bool ShouldUpdate = false;
u32 SelectedFrame = 0;
u32 FrameRepeatCount = 0;

static void __attribute__((interrupt)) setUpdateFlag() {
    ShouldUpdate = true;
    clearIntFlag(_TIMER_4_IRQ);
}

void setup() {
    Serial.begin(115200);
    Serial.println("Setup...");

    TRISDCLR = LDAC;
    LATDSET  = LDAC;

    Wire.begin();
    u32 Clock = Wire.setClock(1000000);
    Serial.printf("Clock set to %d\r\n", Clock);

    // NOTE(nox): Sequential write command (A -> D) - 5.6.3
    {
        Wire.beginTransmission(DacAddr);
        Wire.write(0x50);

        u8 ActiveData[] = {0x9F, 0xFF};
        Wire.write(ActiveData, 2);
        Wire.write(ActiveData, 2);

        u8 DisabledData[] = {0x40, 0x00};
        Wire.write(DisabledData, 2);
        Wire.write(DisabledData, 2);

        Wire.endTransmission();
    }
    delay(50);

    // NOTE(nox): 30 FPS
    Timer.setFrequency(30);
    Timer.attachInterrupt(setUpdateFlag);
    Timer.start();

    Serial.println("Setup done.");
}

// NOTE(nox): X and Y are in the range [0, 4096[
static void setCoordinates(u16 X, u16 Y) {
    LATDSET = LDAC;

    // NOTE(nox): Multi-Write command - 5.6.2
    u8 Data[] = {(0x40 | (0 << 1) | 1), (0x90 | inputMsb(X)), inputLsb(X),  // Output A
                 (0x40 | (1 << 1) | 1), (0x90 | inputMsb(Y)), inputLsb(Y)}; // Output B
    Wire.beginTransmission(DacAddr);
    Wire.write(Data, arrayCount(Data));
    Wire.endTransmission();

    LATDCLR = LDAC;
}

void loop() {
    if(ShouldUpdate) {
        frame *Frame = Frames + SelectedFrame;
        for(u32 I = 0; I < Frame->PointCount; ++I) {
            point *P = Frame->Points + I;
            setCoordinates(P->X, P->Y);
        }
        ++FrameRepeatCount;
        if(FrameRepeatCount >= Frame->RepeatCount) {
            FrameRepeatCount = 0;
            SelectedFrame = (SelectedFrame + 1) % arrayCount(Frames);
        }
        ShouldUpdate = false;
    }
}

#endif
