#+TITLE: Projeto de Computadores
#+SUBTITLE: Desenho de figuras arbitrárias em osciloscópios, usando o modo XY e um \acs{DAC}
#+AUTHOR: André Aragão e Gonçalo Santos
#+LANGUAGE: pt
#+LATEX_HEADER: \usepackage[margin=.7in]{geometry}
#+LATEX_HEADER: \usepackage[portuguese]{babel}
#+LATEX_HEADER: \usepackage[binary-units]{siunitx}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage[section]{placeins}
#+LATEX_HEADER: \usepackage[printonlyused]{acronym}
#+LATEX_HEADER_EXTRA: \usepackage{xcolor}
#+LATEX_HEADER_EXTRA: \hypersetup{colorlinks, linkcolor={red!50!black}, citecolor={blue!50!black}, urlcolor={blue!80!black}}

#+LATEX_HEADER: \newcommand{\ordMas}{\textsuperscript{\b{o}}}
#+LATEX_HEADER: \newcommand{\ordFem}{\textsuperscript{\b{a}}}
#+LATEX_HEADER: \makeatletter\newcommand{\nolisttopbreak}{\vspace{\topsep}\nobreak\@afterheading}\makeatother

* Introdução
Este projeto consiste no uso de um \ac{DAC} para efetuar o desenho de figuras arbitrárias com o modo XY
do osciloscópio (ou XYZ nos analógicos). A escolha do [[https://www.microchip.com/wwwproducts/en/en541737][MCP4728]], em detrimento do outro \ac{DAC} proposto
prendeu-se ao facto de este ser mais rápido (menor tempo de asssentamento), apesar de ter menor
resolução: \SI{12}{\bit}, ao invés de \SI{16}{\bit} do \ac{DAC} da /Texas Instruments/.

Inicialmente, a ideia era fazer um gerador de sinais com os sinais clássicos, tais como ondas
sinusoidais, quadradas e triangulares, com as propriedades ajustáveis, e ainda, caso houvesse tempo, um
gerador de sinais arbitrário, onde o utilizador pode desenhar a forma de onda que quiser.

No entanto, depois de lermos a /datasheet/ do MCP4728, vimos que o resultado não seria muito
satisfatório, uma vez que a tecnologia \ac{I2C} não é a mais indicada para este tipo de funcionalidade, e
o tempo de assentamento do \ac{DAC}, ainda que incrivelmente baixo para algumas aplicações, resultaria
numas ondas não muito suaves ou então de muito baixa frequência.

Desanimados com a impossibilidade de executar a nossa ideia inicial, lembrámo-nos de ver algumas pessoas
a desenhar imagens em osciloscópios. Depois de pensar no assunto, apercebemo-nos que seria a aplicação
ideal para um projeto destes, uma vez que, no modo XY, o tempo de assentamento era suficientemente baixo
para não se notarem as transições dos saltos em demasia.

Propusémo-nos então a fazer um sistema de desenho de animações onde o utilizador pode desenhar várias
frames de tempo regulável e ver uma representação fiel no osciloscópio do que desenhou.

* Configuração inicial
A primeira coisa que fizemos foi ler cuidadosamente a /datasheet/ correspondente ao MCP4728. Também
revimos o funcionamento do [[https://en.wikipedia.org/wiki/I%25C2%25B2C][\ac{I2C}]], que é o protocolo de comunicação usado pelo conversor.

Efetuámos a montagem cuidadosa do circuito pedido, assim como [[fig:Wiring][o seu desenho]] a computador recorrendo ao
programa [[http://fritzing.org/home/][Fritzing]], e de seguida escrevemos um programa simples que fazia uma chamada a todos os endereços
\ac{I2C} possíveis para termos a certeza que estávamos a ter uma comunicação bem sucedida com o
dispositivo.

#+NAME: fig:Wiring
#+CAPTION: Representação das ligações elétricas
[[file:Pictures/breadboard_setup.png]]

Não só descobrimos que a montagem tinha sido feita corretamente, uma vez que estávamos a receber um
\texttt{ACK} do MCP4728, mas também que o seu endereço não era o que vinha por defeito da fábrica -
\texttt{0x60} - mas sim \texttt{0x61} (este dispositivo tem os 3 \ac{LSB} de endereço configuráveis,
guardados numa EEPROM).

Verificámos na /datasheet/ que existe um comando [[id:4425274b-aab9-4c6e-a1b8-babebde948b2][General Call Read Address]], que permite obter o endereço
do \ac{DAC} sem fazer /polling/ de todos os endereços. Apesar de já não ser necessário, implementámo-lo
de qualquer maneira como desafio.

A implementação do comando [[id:4425274b-aab9-4c6e-a1b8-babebde948b2][Write \ac{I2C} Address Bits]] foi bem sucedida, conseguindo mudar o endereço
de \texttt{0x61} para \texttt{0x60}.

Usando o comando [[id:56b96a2d-1623-49f4-9d64-b22e747d8ec1][Fast Write]], conseguimos definir a tensão de um dos outputs para um valor pretendido e
definir os outros como resistências à massa.

Considerámos que nos encontrávamos na posição de iniciar o envio de pontos e visualização no
osciloscópio, no modo XY. Depois de testarmos o envio de 1 e 2 pontos com sucesso, testámos a transmissão
de uma circuferência. Para isso, utilizámos [[id:9086e8c2-73b9-4fc9-b209-bce4e496085a][estes scripts]] para gerar $100$ pontos da função $\sin$.
Desfazando X e o Y \SI{90}{\degree}, a circunferência foi desenhada com sucesso.

Inicialmente, começámos por animar o desenho ao longo do tempo, alternando entre 2 circunferências de
raios diferentes a cada \SI{5}{\second}. Depois decidimos fazer uma letra, ainda manualmente. Desenhámos
no /software Inkscape/ a letra =C=, num documento quadrado de 4096 pontos de lado, e amostrámos 20
pontos, definindo as suas coordenadas X e Y, e escrevendo num array do programa que corria no \ac{MCU}. Mais
uma vez, o teste foi um sucesso.

A partir deste ponto considerámos que já tínhamos uma base de trabalho razoável e decidimos efetuar a
medição rigorosa do tempo de envio de cada pacote, com o objetivo de que tudo o que fizessemos daqui para
a frente tomasse partido de toda a capacidade do PIC32 e do MCP4728.

* Comandos utilizados e configuração \acs{I2C}
:PROPERTIES:
:ID:       0f228c89-f3fe-4383-83cc-ef9cc04fe44c
:END:
** Frequência de funcionamento
Tendo em conta que queríamos desenhar uma frame o mais rapidamente possível, acabámos por usar
\SI{1}{\mega\hertz} como frequência de \ac{I2C} (/Fast Mode Plus/). As resistências de /pull-up/ foram
alteradas para um valor adequado: \SI{4.7}{\kilo\ohm}.

Enquanto que o \ac{DAC} suportava uma frequência ainda maior (/High Speed Mode/), esta era a máxima
suportada pelo PIC32.

** General Call Read Address e Write \acs{I2C} Address Bits
:PROPERTIES:
:ID:       4425274b-aab9-4c6e-a1b8-babebde948b2
:END:
Estes comandos merecem atenção especial pois não consistem apenas em correr um comando.

#+NAME: fig:GeneralCallReadAddr
#+CAPTION: Diagrama do comando /General Call Read Address/, retirado da /datasheet/ do MCP4728
[[file:Pictures/generalCallReadAddr.png]]

Como podemos ver no [[fig:GeneralCallReadAddr][diagrama]] para o comando /General Call Read Address/ (e semelhantemente para o /Write
Address Bits/), é preciso que o =LDAC= tenha um \ac{FE} entre o 8\ordMas e o 9\ordMas pulso de relógio.

Obter essa \ac{FE} não foi trivial, mas depois de ler a /datasheet/ do PIC32, vimos que o bit TBF é
anulado precisamente no instante que queremos. Para conseguirmos reagir rapidamente, definimos um /timer/
de \SI{500}{\kilo\hertz} que verificava esse bit e colocava o LDAC a 0 no instante correto (como está
feito no ficheiro =AddrReadWrite.cpp=).

** Sequential Write
Este comando é usado na inicialização do programa para definir as definições das 4 saídas do \ac{DAC}.

Como 2 saídas não são usadas, são desativadas e funcionam como uma resistência (de \SI{100}{\kilo\ohm}
com PD = 10) à massa. Nesse modo de /power-down/, consomem consideravelmente menos corrente.

** Fast Write
:PROPERTIES:
:ID:       56b96a2d-1623-49f4-9d64-b22e747d8ec1
:END:
Este comando permite atualizar os registos internos de *todas* as saídas do \ac{DAC}. As saídas em si são
atualizadas quando o =LDAC= é (ou passa para) 0.

Apesar de enviar menos informação/saída, como este comando envia informação de todas as saídas, precisa
de $1+8$ bytes; por isso, não foi utilizado por nós na versão final.

** Multi-Write
Este é o comando mais usado no programa. É o que usamos para definir as tensões das saídas X e Y para
cada ponto de cada frame. Como só atua nas 2 saídas relevantes, apenas precisa de $1 + 6$ bytes.

Se o LDAC estiver a 0 durante o comando, as saídas são alteradas mal se dá o =ACK=. Como queremos
renderizar pontos com 2 coordenadas, queremos alterar as 2 saídas /ao mesmo tempo/, por isso apenas pomos
o LDAC a 0 no final do comando inteiro ser transmitido.

** Select power-down bits
Este comando é usado quando queremos desligar todas as saídas.

* Temporizações
:PROPERTIES:
:ID:       f0c8fa30-7070-4227-afd7-e13092c0d150
:END:
** Medição da frequência
- Frequência \ac{I2C} (/Fast Mode Plus/): \SI{1}{\mega\hertz}
- Frequência \ac{I2C} medida: $\frac{1}{\SI{1.1}{\micro\second}} \approx \SI{910}{\kilo\hertz}$

** Tempo de envio do Multi-Write
\[ t_{byte} + t_{ack} = \SI{9.5}{\micro\second} \]

#+NAME:   fig:Timings
#+CAPTION: Diagrama ilustrativo do tempo de envio do comando, =START= a verde e =STOP= a vermelho
[[file:Pictures/timings_diagram.png]]

Duração das pausas:\nolisttopbreak
- $p_1 = \SI{6.9}{\micro\second}$
- $p_2 = \SI{2.66}{\micro\second}$
- $p_3 = \SI{7.88}{\micro\second}$
- $p_4 = \SI{8.5}{\micro\second}$

Assim, desprezando o tempo do =START= e do =STOP=, o tempo de transmissão de cada comando é dado por
$7 (t_{byte}+t_{ack})+p_1+5 p_2+ p_3) = \SI{95}{\micro\second}$. A medição efetuada no osciloscópio, recorrendo aos
cursores, confirmou esse valor.

No programa, aproximámos esse tempo por \SI{100}{\micro\second}, e considerámos $p_4$ desprezável.

** Limitação do número de pontos por frame
O resultado obtido na secção anterior permite-nos derivar um limite para o número de pontos máximo por
frame.

A nossa decisão foi que as animações /nunca/ deviam correr abaixo de 30 FPS. Sendo assim, temos um tempo
máximo de \SI{30}{\milli\second} por cada frame. Uma vez que cada ponto demora \SI{100}{\micro\second} a ser
transmitido, então podemos ter, /no máximo/, 300 pontos por frame.

Este limite tem outras implicações práticas:
- Nunca precisamos de alocação dinâmica pois conhecemos o limite superior do tamanho das animações.
  Podemos simplesmente alocar um array com o tamanho máximo e preenchê-lo à medida que o utilizador
  desenha.
- A grelha de desenho deve ter pontos suficientes para se poder desenhar com detalhe, mas também não deve
  ter pontos tão pequenos que um arrastar do rato preencha 200 ou 300 pontos de uma só vez. Usámos um
  tamanho para a grelha de 64 por 64 e vimos que esse tamanho satisfazia ambas as condições.
  - Este tamanho de grelha implica uma redução de precisão dos 12 bits que o \ac{DAC} fornece. Isto foi
    usado a nosso favor no [[id:6e5bb395-210e-4a84-81bf-a047e12a68e9][protocolo de comunicação]].

* Funcionamento do programa no MCU
O MCU tem um programa que tem estruturas que definem as 2 animações presentes nele. Essas animações podem
ser alteradas em tempo real com o [[id:6e5bb395-210e-4a84-81bf-a047e12a68e9][protocolo de comunicação]] implementado.

Com essa informação, usa os [[id:0f228c89-f3fe-4383-83cc-ef9cc04fe44c][comandos descritos anteriormente]] para fazer update das duas saídas ao mesmo
tempo (coordenadas X e Y), para cada ponto da frame. Ao variar rápido o suficiente, a imagem fica marcada
no osciloscópio como se tivesse sido desenhada toda ao mesmo tempo e não ponto a ponto.

Como foi referido, as animações vão correr no mínimo a 30 FPS. A [[id:9f607ed4-a48d-42b9-9be1-d1f88aa70a9c][aplicação de controlo]] ao gerar a
informação calcula os FPS a que pode correr a animação com base no número de pontos presentes em cada
frame (quanto menos pontos, a mais FPS pode correr). Isto foi implementado como combate ao leve /flicker/
visualizado ao desenhar a 30FPS.

Os FPS são usados como frequência de um timer que, quando dispara, ativa a uma /flag/ a indicar quando se
deve desenhar uma nova frame.

Uma vez que estamos a usar apenas 6 bits de precisão, pudemos reduzir o espaço ocupado pelos arrays para
metade *sem custo nenhum*, pois apenas precisamos de guardar 1 byte de informação. Um dos 2 bits livres
nesse byte é usado para a modulação Z.

* Aplicação de controlo
:PROPERTIES:
:ID:       9f607ed4-a48d-42b9-9be1-d1f88aa70a9c
:END:
Desenhar as formas manualmente, ou seja, com recurso a papel e lápis, não era viável visto que seria
extremamente trabalhoso, pelo que ponderámos duas opções para otimizar o processo:

- Opção 1 :: Desenho na grelha de um ficheiro /Excel/ e exportando para /arrays/ com o uso de macros ou
             de um programa auxiliar que lesse =.csv=

- Opção 2 :: Criação de um programa para o computador em C, com interface gráfica, para que, com auxílio
             de uma grelha, o utilizador possa desenhar a forma geométrica que quiser, sendo esta
             exportada num formato fácil de importar no programa do \ac{MCU}.

Optámos pela *opção 2* uma vez que:
- Linguagem C já era familiar
- Tinha maior flexibilidade para implementar várias /features/ que tínhamos em mente
- Poderia ser extendido facilmente de maneira a fazer *comunicação direta* (UART) com o PIC32 e enviar as
  animações para o \ac{MCU} sem ter de recompilar e fazer upload

A dificuldade principal era criar um programa com interface gráfica de raiz. No entanto, como já tínhamos
investigado sobre esse tópico anteriormente, decidimos usar as bibliotecas [[https://www.glfw.org/][GLFW]] (+ [[https://github.com/raysan5/raylib/blob/master/src/rglfw.c][rglfw]] para facilitar a
compilação), [[https://github.com/skaslev/gl3w][gl3w]] e [[https://github.com/ocornut/imgui][Dear ImGui]], que facilitaram bastante esse processo, apesar de serem todas muito
/lightweight/ em comparação com as alternativas (tais como Qt ou GTK).

Aproveitamos para referir o facto da biblioteca de interface gráfica, /Dear ImGui/, não ser como as mais
conhecidas, pois em vez de ser /Retained Mode/, é, como o nome indica, /Immediate Mode GUI/. Este
paradigma foi popularizado por [[https://caseymuratori.com/about][Casey Muratori]], criador da série educativa [[https://handmadehero.org/][Handmade Hero]].

Numa /IMGUI/, o código do utilizador tem a maior parte dos dados necessários para renderizar a interface, e
a interface é quase completamente reconstruída a 60FPS, enquanto que nas /RMGUIs/ os dados estão
guardados nas estruturas das próprias bibliotecas.

Assim sendo, é muito mais fácil criar interfaces altamente dinâmicas, onde tudo pode ser alterado de uma
frame para a outra. Esta biblioteca em específico é também muito extensível, o que foi uma vantagem pois
o /widget/ da grelha de desenho foi feito especialmente para este projeto.

A aplicação de controlo, após finalizada, possui as seguintes features:\nolisttopbreak
- Possibilidade de desenhar até 10 /frames/ graficamente e de alterar a duração de cada frame para
  valores arbitrários.
- Possibilidade de visualizar a frame anterior, para mais fácil criação de uma /imagem animada/. Esta
  técnica é designada por /onion skinning/. Os pontos da frame anterior aparecem com uma cor diferente,
  mais neutra, para distinção.
- Uma linha vermelha, que percorre todos os pontos pela ordem em que são desenhados, de maneira a que
  seja evidente saltos visualizados no osciloscópio. Esta funcionalidade permite prever linhas
  indesejadas.
- Possibilidade de optimizar o caminho, através do algoritmo /nearest neighbour/. Esta optimização tem
  sempre de ser averiguada visualmente pelo utilizador, visto que pode até prejudicar o caminho
  percorrido. Destina-se a tentar reduzir as linhas indesejadas resultantes de saltos.
- Possibilidade de guardar/carregar animações para/de ficheiros (formato binário)

Para além destas features, tem ainda exportação de animações quer copiando um array em C para o
/clipboard/ quer [[id:6e5bb395-210e-4a84-81bf-a047e12a68e9][diretamente para o PIC32 através de um protocolo binário]].

* Protocolo de comunicação com o PIC32 (sobre UART)
:PROPERTIES:
:ID:       6e5bb395-210e-4a84-81bf-a047e12a68e9
:END:
Antes de implementar o protocolo, verificámos a /endianess/ do computador e do PIC32. Ambos reveleram ser
/little-endian/. Mesmo assim, resolvemos adicionar uma cláusula de erro (compile-time) no programa, visto
que todo o programa só está feito para funcionar quando ambas as partes usam /little-endian/.

O envio de dados em /plain text/ era uma opção demasiado dispendiosa visto que cada carater requer a
utilização de um byte, pelo que nem hesitámos em decidir que o protocolo seria binário.

A definição e implementação do correto funcionamento do protocolo foi, sem alguma dúvida, a parte *mais
exigente* deste trabalho. Queríamos um protocolo que fosse simples, rápido e adaptado para fazer
transmissões grandes (ao contrário de transmissão de comandos curtos).

Depois de muitas horas a pesquisar e muitas dúvidas pendentes, deparamo-nos com o algoritmo \ac{COBS}
([[https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing][página da Wikipedia]]), de framing de pacotes (ou seja, sincronização com os pacotes de maneira a não se
começar a ler do meio de um) usando um delimitador (0 no nosso caso). O algoritmo consegue remove a
existência de delimitadores da mensagem a transmitir com /overhead/ *quase inexistente*!

Na versão final acabámos por usar uma versão modificada, em vez de ter o delimitador no fim de cada
pacote, ter o delimitador no início de cada pacote. A razão dessa modificação foi pensarmos na
possibilidade de ocorrerem erros e um pacote ficar truncado (sem o final) e querermos retomar logo no
seguinte (vendo o delimitador no início). No entanto, temos agora o problema de nunca saber quando é que
um pacote acaba, por isso sempre que descodificamos mais um bocado de um pacote, temos de verificar se já
está completo.

Para isso, definimos um cabeçalho constituído por:
- Meio byte com um padrão "mágico" de verificação (\texttt{0xA} = \texttt{1010})
- Meio byte com o comando (podemos então ter $2^4 = 16$ comandos diferentes)
- 2 bytes com o tamanho do /payload/ (iríamos ter de certeza /payloads/ maiores do que 255 bytes)

Sempre que descodificamos mais uma parte, e se o padrão "mágico" estiver correto, verificamos se já temos
o /payload/ completo verificando com o parâmetro do cabeçalho.

Se estiver completo, é processado com base no comando transmitido. Se não estiver, esperamos que sejam
descodificados mais blocos. Se houver erro no padrão mágico, então é marcado como inválido e esperamos
pelo próximo delimitador para processar outro pacote.

** Problemas de receção
Apesar de parecer que estava tudo resolvido, neste tipo de problemas, há sempre mais dores de cabeça por
resolver. Foram precisos vários dias (grande parte deles a pensar no problema) e duas implementações
diferentes até conseguirmos obter comunicações consistentes.

Por exemplo, só depois de fazermos a primeira implementação é que nos lembramos na importância do
qualificador =volatile=, pois o compilador podia estar a induzir-nos em erro.

Também tivemos problemas do buffer de receção ficar cheio e tivemos de o aumentar para 1024 bytes. Talvez
o nosso código pudesse ter sido feito de maneira mais inteligente, descodificando /partes/ de grupos do
\ac{COBS} enquanto eram recebidos (esses grupos são compostos por sequências de bytes sem o valor do
delimitador /na mensagem original/ e podem ir até 255 bytes).

No entanto, é um facto que em frames com muitos pontos, a maior parte do tempo (\SI{30}{\milli\second} em
\SI{33}{\milli\second}) é passada a fazer a renderização da frame em si, com pouco tempo para
processamento das mensagens recebidas.

De qualquer maneira, acabámos por conseguir um programa que recebe /com sucesso/ todas as mensagens, e
buffer overflows são indicados na InfoLed. Durante todos os nossos testes, nunca se acendeu, a não ser
quando reduzimos o buffer de receção de propósito, como teste.

** Notas adicionais
A comunicação série foi feita sem o uso de bibliotecas externas (para além da =termios=), tanto na
aplicação de controlo como no \ac{MCU} (não foi usada a biblioteca Arduino).

O buffer de receção teve de ser potência de 2 pois isso permitiu-nos fazer um [[https://en.wikipedia.org/wiki/Circular_buffer][ring buffer]] *muito*
eficiente a nível de instruções para o PIC32.

Ao saturar a transmissão ao máximo, descobrimos que as mensagens deixavam de chegar, mas sem nunca se
acender a InfoLed. Ao investigar o assunto, descobrimos que o mais provável era estar a fazer /overflow/
do buffer de *transmissão definido no kernel do Linux* (/hardcoded/ para 4096 bytes). O erro acontecia
quando se transmitiam *muito rapidamente* mais ou menos 5000 bytes, o que ainda nos fez acreditar mais
que seria esse o problema.

** Comandos implementados
- Ligar/desligar a info LED
- Ligar/desligar as saídas do \ac{DAC}
- Seleção do slot de animação atual
- Update de uma frame da animação selecionada
- Update da contagem de frames da animação selecionada
- Comando para ativar/desativar a passagem da saída para a coordenada (0,0) depois de desenhar, para o
  ponto final não ficar muito mais forte do que os outros

** Descodificador do \acs{COBS} para o Sigrok
Uma das ferramentas que deu imenso jeito no /debugging/ do projeto foi um analisador digital, e o
programa open-source [[https://sigrok.org/wiki/PulseView][PulseView]]. Para nos facilitar os testes do protocolo, ainda fizemos um decoder de
COBS em Python, usando a API fornecida pela biblioteca Sigrok, e que dá para ser /stacked/ em cima do
decoder UART que já vinha com a biblioteca.

#+NAME:   fig:sigrok
#+CAPTION: /Printscreen/ do Sigrok a analisar o nosso protocolo
[[file:Pictures/sigrok.png]]

[[fig:sigrok][No printscreen]] podemos ver uma parte de uma sequência de comandos descodificados, onde na última linha
vemos o output do nosso decoder. Por exemplo, o último =Start= indica o início de um comando de update da
contagem de frames (\texttt{0x7}), com o padrão mágico válido (\texttt{0xA}), com tamanho da /payload/
\texttt{0x0001}, com a contagem nova a ser 3 e o último 0 resulta da codificação \ac{COBS}, a que
chamamos de /ghost zero/.

* Jogo Pong
** Contexto
Numa das idas ao laboratório para testar no osciloscópio analógico, o técnico sugeriu fazermos alguma
coisa interativa, como por exemplo, um jogo.

Adorámos a ideia, e apesar de já estarmos bastante satisfeitos com o que tínhamos, tendo feito a
implementação e verificação do protocolo de comunicação, pensámos que seria bastante simples criar um
jogo que fosse completamente simulado no computador e que transmitisse a informação do que era preciso
desenhar para o PIC32.

O Pong foi escolhido porque, para além de ser um jogo simples de desenvolver (o que era um fator
decisivo, tendo em conta que o desenvolvimento do jogo começou 2 dias antes da apresentação), era também
muito simples a nível de gráficos, precisando apenas de 2 barras verticais, 1 bola e números para mostrar
o score.

** Comandos
Apenas foi necessário implementar 2 comandos:
- O comando =Update= envia as posições verticais das barreiras e as coordenadas da bola
- O comando =SetScore= envia o score atual

** Funcionamento
É a aplicação no computador que corre toda a lógica do jogo. A sua interface é muito simples, apenas um
botão de ligação, pois o controlo das barreiras é feito através do teclado.

Foi definido que a lógica o jogo deveria correr a 30FPS. Sempre que há um update são calculadas as novas
posições das bolas e das barreiras, sendo estes enviados no final para o \ac{MCU}.

Caso a bola consiga passar as barreiras, o score atualizado também é enviado para o \ac{MCU}.

*** Coordenadas, colisões e reflexões
Tivemos de ter especial atenção com as coordenadas dos objetos e como fazemos as verificações de
colisões.

Escolhemos que as posições das barreiras seriam dadas por um inteiro que define a coordenada Y dos seus
centros, estando então as barreiras sempre ajustadas à grelha de 64 por 64.

No entanto, uma vez que a bola podia andar em qualquer direção e os timesteps era muito pequenos, as suas
coordenadas X e Y tinham de ser definidas por valores em vírgula flutuante (porque cada timestep por si
só poderia não acumular mudança suficiente que fizesse a bola ir para coordenadas adjacentes e o erro
seria truncado).

Tendo então os valores inteiros e fracionários de coexistir, a solução foi escolher que os valores
inteiros das coordenadas coincidem com os centros dos quadrados na grelha.

Quando a bola vai a sair do jogo pelo extremo superior ou inferior, apenas refletimos a sua velocidade
verticalmente.

A nível de colisões com as barreiras, usámos um algoritmo que calcula a interseção entre 2 segmentos de
reta, e retorna $u$ e $t$, que são a "coordenada" do ponto da colisão usando os segmentos como base.
Sendo assim, para haver colisão, é preciso que ambos estejam entre 0 e 1.

Este algoritmo impede o chamado /tunneling/, pois verifica as colisões continuamente. No entanto, é quase
certo que há /edge cases/ em que a nossa verificação de colisões falhe, mas para um exemplo rápido,
achamos bom o suficiente.

Quando colide com as barreiras, a sua velocidade seguinte depende do ponto de colisão (relativamente a
ser acima ou abaixo do centro da barreira).

*** Alta resolução
Uma vez que a bola é representada por coordenadas fracionárias e neste programa não há Z bit, não custou
nada usar o byte inteiro na transmissão para representar a sua posição. A única mudança no \ac{MCU} é a
maneira como enviamos o comando para o \ac{DAC}.

* Conclusão
Este trabalho levou ao aprofundamento do nosso conhecimento em vários domínios, nomeadamente:
- Aprofundamento do conhecimento do microcontrolador PIC32
- Familiarização com a leitura de /datasheets/
- Aprofundamento do conhecimento do protocolo de comunicação \ac{I2C}
- Desenvolvimento de protocolo de comunicação binário adaptado, baseado em /COBS/
- Aprofundamento do conhecimento de transferência de dados, assim como os seus problemas: /framing/,
  /data loss/, etc
- Integração de bibliotecas e utilização das suas APIs
- Experiência na área de desenvolvimento de jogos, ainda que muito básicos, com problemas como resolução
  de colisões
- Familizarização com a ferramenta git, com recurso ao Gitlab
- Domínio da linguagem LaTeX

Inicialmente tivemos algumas pequenas complicações, como a falha na leitura dos valores durante toda a
segunda aula prática laboratorial, mas rapidamente foram solucionadas. O problema mais grave foi sem
dúvida alguma termos queimado a placa fornecida pela faculdade, devido a termos ligado um transformador
que tinhamos connosco de 12V. Apesar da inscrição referente ao /jack DC/ dizer /15V MAX!/, o /jumper/
azul da placa responsável pela seleção do /Power Select/ encontrava-se no modo /Bypass/, o que, através
da nossa pesquisa, indica que o PIC32 é diretamente alimentado pela fonte ligada ao /jack DC/. Como o
PIC32 apenas suporta 6V diretamente, acreditamos que o chip queimou. Foi evidente que algo errado
aconteceu visto que o /IC3/ da placa ficou "furado". No mesmo dia adquirimos outra placa igual.

De maneira geral, foi um trabalho muito interessante de se fazer, e muito recompensador. Foi muito
satisfatório vermos tudo a encaixar e a funcionar, algumas vezes à primeira tentativa.

Consideramos que este trabalho, enquanto futuros engenheiros, representou um processo de aprendizagem
significativo. Tivemos a oportunidade de abordar conceitos multidisciplinares, nomeadamente de unidades
curriculares como Programação, Informação e Comunicação e, como não poderia deixar de ser, Computadores.

* Apêndices                                                                                    :ignore_nested:
#+BEGIN_EXPORT latex
\appendix
\section*{Apêndices}
\addcontentsline{toc}{section}{Apêndices}
\renewcommand{\thesubsection}{\Alph{subsection}}
#+END_EXPORT
** Criação do /array/ com os valores sinusoidais
:PROPERTIES:
:ID:       9086e8c2-73b9-4fc9-b209-bce4e496085a
:END:
O próximo excerto de código gera 100 valores da função $2048 + 2047 \sin t$, com $t \in [0, 2\pi[$, e imprime
um /array/ em linguagem C do tipo =uint16_t[]= com esses valores.
#+BEGIN_SRC matlab :results output :exports both :eval no-export
t = linspace(0, 2*pi, 101);
t = t(1:end-1);

output = "u16 BigSin[] = {";
for i = 1 : length(t)
    if mod(i-1, 10) == 0
        output = output + newline + "    ";
    end
    output = output + sprintf("%-6s", sprintf("%d,", round(2048 + 2047*sin(t(i)))));
end
output = output + newline + "};"
#+END_SRC
#+RESULTS:
#+begin_example
output =

    "u16 BigSin[] = {
         2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3034, 3145,
         3251, 3353, 3449, 3540, 3625, 3704, 3776, 3842, 3900, 3951,
         3995, 4031, 4059, 4079, 4091, 4095, 4091, 4079, 4059, 4031,
         3995, 3951, 3900, 3842, 3776, 3704, 3625, 3540, 3449, 3353,
         3251, 3145, 3034, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
         2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1062, 951,
         845,  743,  647,  556,  471,  392,  320,  254,  196,  145,
         101,  65,   37,   17,   5,    1,    5,    17,   37,   65,
         101,  145,  196,  254,  320,  392,  471,  556,  647,  743,
         845,  951,  1062, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
     };"
#+end_example

Usámos o mesmo processo para gerar os valores para uma sinusoidal mais pequena, com a fórmula
$2048 + 1024 \sin t$.
#+BEGIN_SRC matlab :results output :exports none :eval no-export
t = linspace(0, 2*pi, 101);
t = t(1:end-1);

output = "u16 SmallSin[] = {";
for i = 1 : length(t)
    if mod(i-1, 10) == 0
        output = output + newline + "    ";
    end
    output = output + sprintf("%-6s", sprintf("%d,", round(2048 + 1024*sin(t(i)))));
end
output = output + newline + "};"
#+END_SRC
#+RESULTS:
#+begin_example
output =

    "u16 SmallSin[] = {
         2048, 2112, 2176, 2240, 2303, 2364, 2425, 2484, 2541, 2597,
         2650, 2701, 2749, 2794, 2837, 2876, 2913, 2945, 2975, 3000,
         3022, 3040, 3054, 3064, 3070, 3072, 3070, 3064, 3054, 3040,
         3022, 3000, 2975, 2945, 2913, 2876, 2837, 2794, 2749, 2701,
         2650, 2597, 2541, 2484, 2425, 2364, 2303, 2240, 2176, 2112,
         2048, 1984, 1920, 1856, 1793, 1732, 1671, 1612, 1555, 1499,
         1446, 1395, 1347, 1302, 1259, 1220, 1183, 1151, 1121, 1096,
         1074, 1056, 1042, 1032, 1026, 1024, 1026, 1032, 1042, 1056,
         1074, 1096, 1121, 1151, 1183, 1220, 1259, 1302, 1347, 1395,
         1446, 1499, 1555, 1612, 1671, 1732, 1793, 1856, 1920, 1984,
     };"
#+end_example

** Acrónimos
#+BEGIN_EXPORT latex
\begin{acronym}
  \acro{DAC}{Digital-to-Analog Converter}
  \acro{FE}{falling edge}
  \acro{I2C}[\texorpdfstring{I\textsuperscript{2}C}{I2C}]{Inter-Integrated Circuit}
  \acro{LSB}{bits menos significativos}
  \acro{COBS}{Consistent Overhead Byte Stuffing}
  \acro{MCU}{Microcontroller Unit}
\end{acronym}
#+END_EXPORT
